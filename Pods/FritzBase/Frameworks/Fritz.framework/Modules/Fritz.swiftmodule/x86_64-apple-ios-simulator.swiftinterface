// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.16.9 clang-1200.0.22.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Fritz
import Foundation
@_exported import Fritz
import Swift
public struct SegmentationModelSpec {
}
public struct Segmentation {
  public let mask: [[Swift.Float]]
  public let label: Swift.String
  public init(mask: [[Swift.Float]], label: Swift.String)
  public var intMask: [[Swift.Int8]] {
    get
  }
}
public enum ArrayError : Swift.Error {
  case invalidSize
  public func message() -> Swift.String
  public static func == (a: Fritz.ArrayError, b: Fritz.ArrayError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Array where Element == Swift.Float {
  public func as2D(width: Swift.Int, height: Swift.Int) throws -> [[Swift.Float]]
}
@available(iOS 11.0, *)
extension CocoImageAnnotation {
  public init(mask: [[Swift.Int8]], label: Swift.String)
}
@available(iOS 11.0, *)
extension Segmentation : FritzManagedModel.AnnotationRepresentable {
  public func annotations(for input: FritzVision.FritzVisionImage) -> [FritzManagedModel.CocoImageAnnotation]
  public typealias Source = FritzVision.FritzVisionImage
  public typealias Annotation = FritzManagedModel.CocoImageAnnotation
}
@available(iOS 12.0, *)
extension FritzVisionSegmentationPredictor : FritzVision.PredictionImageRecordable {
  public typealias AnnotationRepresentation = [Fritz.Segmentation]
}
extension Fritz.ArrayError : Swift.Equatable {}
extension Fritz.ArrayError : Swift.Hashable {}
